import os
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ========= –ö–æ–Ω—Ñ–∏–≥ =========
API_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ë–∞–∑–æ–≤—ã–π URL –±—ç–∫–µ–Ω–¥–∞. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å:
# BACKEND_URL=http://127.0.0.1:8000  –ò–õ–ò  BACKEND_URL=http://127.0.0.1:8000/v1
_BASE = os.getenv("BACKEND_URL", "http://127.0.0.1:8000").rstrip("/")
API_V1 = _BASE if _BASE.endswith("/v1") else f"{_BASE}/v1"

def api(path: str) -> str:
    # path –ø–µ—Ä–µ–¥–∞—ë–º –≤–∏–¥–∞ "/users/123/..."
    return f"{API_V1}{path}"

# ========= –ë–æ—Ç =========
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å (–ø—Ä–æ—Å—Ç–∞—è, –Ω–µ –ë–î)
user_session: dict[int, dict] = {}   # –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
quiz_state: dict[int, dict] = {}     # –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
AUTO_MODE: dict[int, bool] = {}      # —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: True=–∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä, False=–º–∞—Å—Ç–µ—Ä

# ========= UI =========
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

def yesno_inline():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ê–≤—Ç–æ", callback_data="quiz_auto"),
        InlineKeyboardButton("–ú–∞—Å—Ç–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="quiz_manual"),
    )

# ========= –•–µ–ª–ø–µ—Ä—ã =========
def has_any_prefs(user_id: int) -> bool:
    """–ï—Å—Ç—å –ª–∏ –≤ –±—ç–∫–µ–Ω–¥–µ —á—Ç–æ-—Ç–æ –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–≤–∏–∑ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å)"""
    try:
        r = requests.get(api(f"/users/{user_id}/quiz"), timeout=5)
        if r.status_code == 200 and r.json():
            return True
    except Exception:
        pass
    try:
        r = requests.get(api(f"/users/{user_id}/profile"), timeout=5)
        if r.status_code == 200 and r.json():
            return True
    except Exception:
        pass
    return False

def render_books(books: list[dict]) -> str:
    lines = []
    for b in books:
        title = b.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        line = f"üìñ {title}"
        if b.get("author"):
            line += f" ‚Äî {b['author']}"
        if b.get("reason"):
            line += f"\nüõà {b['reason']}"
        lines.append(line)
    return "\n\n".join(lines)

# ========= –ö–æ–º–∞–Ω–¥—ã =========
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

@dp.message_handler(commands=['mode'])
async def mode_toggle(message: types.Message):
    uid = message.from_user.id
    cur = AUTO_MODE.get(uid, True)
    AUTO_MODE[uid] = not cur
    state = "–∞–≤—Ç–æ" if AUTO_MODE[uid] else "–º–∞—Å—Ç–µ—Ä"
    await message.answer(f"–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {state}.", reply_markup=main_kb())

# ========= –ü—Ä–æ—Ñ–∏–ª—å =========
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    try:
        r = requests.get(api(f"/users/{message.from_user.id}/profile"), timeout=10)
        if r.status_code == 404:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏–ª–∏ ¬´üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª.", reply_markup=main_kb())
            return
        r.raise_for_status()
        p = r.json()
        txt = (
            f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {p.get('first_name') or '-'} {p.get('last_name') or ''}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await message.answer(txt, reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}", reply_markup=main_kb())

# ========= –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ =========
@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_start(message: types.Message):
    uid = message.from_user.id
    # —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∞–≤—Ç–æ
    auto = AUTO_MODE.get(uid, True)

    # –µ—Å–ª–∏ –∞–≤—Ç–æ –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –¥–µ—Ä–≥–∞–µ–º –±—ç–∫–µ–Ω–¥
    if auto and has_any_prefs(uid):
        await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶", reply_markup=main_kb())
        try:
            r = requests.post(
                api(f"/users/{uid}/recommendations"),
                json={"favorites": [], "genres": [], "authors": []},
                timeout=60,
            )
            r.raise_for_status()
            data = r.json()
            books = data.get("books", [])
            if not books:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî", reply_markup=main_kb())
                return
            await message.answer(render_books(books), reply_markup=main_kb())
            return
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_kb())
            # –ü–∞–¥–∞–µ–º –≤ "–º–∞—Å—Ç–µ—Ä", –µ—Å–ª–∏ –∞–≤—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å

    # –º–∞—Å—Ç–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
    user_session[uid] = {"step": "books"}
    await message.answer(
        "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)",
        reply_markup=main_kb()
    )

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "books")
async def rec_books(message: types.Message):
    s = user_session[message.from_user.id]
    s["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...", reply_markup=main_kb())

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "genres")
async def rec_genres(message: types.Message):
    s = user_session[message.from_user.id]
    s["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:", reply_markup=main_kb())

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "authors")
async def rec_authors(message: types.Message):
    uid = message.from_user.id
    s = user_session[uid]
    s["authors"] = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = None
    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶", reply_markup=main_kb())

    try:
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        r = requests.post(
            api(f"/users/{uid}/recommendations"),
            json={"favorites": s.get("favorites", []), "genres": s.get("genres", []), "authors": s.get("authors", [])},
            timeout=60,
        )
        r.raise_for_status()
        data = r.json()
        books = data.get("books", [])

        # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—å (best-effort)
        try:
            _ = requests.put(
                api(f"/users/{uid}/profile"),
                json={
                    "username": message.from_user.username,
                    "first_name": message.from_user.first_name,
                    "last_name": message.from_user.last_name,
                    "lang": "ru",
                    "preferred_genres": s.get("genres", []),
                    "preferred_authors": s.get("authors", []),
                },
                timeout=10,
            )
        except Exception:
            pass

        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî", reply_markup=main_kb())
            return

        await message.answer(render_books(books), reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_kb())

# ========= –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ =========
@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    quiz_state[message.from_user.id] = {"q": 1}
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?", reply_markup=main_kb())

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 1)
async def quiz_q1(message: types.Message):
    st = quiz_state[message.from_user.id]
    st["q1"] = message.text.strip()
    st["q"] = 2
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)", reply_markup=main_kb())

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 2)
async def quiz_q2(message: types.Message):
    uid = message.from_user.id
    st = quiz_state[uid]
    try:
        n = int(message.text.strip())
    except:
        await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5", reply_markup=main_kb())
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±—ç–∫–µ–Ω–¥
    try:
        r = requests.post(
            api(f"/users/{uid}/quiz"),
            json={"q1_favorite_book": st["q1"], "q2_books_per_year": n},
            timeout=10,
        )
        r.raise_for_status()
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}", reply_markup=main_kb())
    finally:
        quiz_state.pop(uid, None)

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–¥–±–æ—Ä–∫—É?", reply_markup=yesno_inline())

@dp.callback_query_handler(lambda c: c.data in ("quiz_auto", "quiz_manual"))
async def quiz_next_step(call: types.CallbackQuery):
    uid = call.from_user.id
    choice = call.data
    AUTO_MODE[uid] = (choice == "quiz_auto")
    await call.answer()

    if choice == "quiz_auto" and has_any_prefs(uid):
        await call.message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶", reply_markup=main_kb())
        try:
            r = requests.post(
                api(f"/users/{uid}/recommendations"),
                json={"favorites": [], "genres": [], "authors": []},
                timeout=60,
            )
            r.raise_for_status()
            books = r.json().get("books", [])
            if not books:
                await call.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî", reply_markup=main_kb())
                return
            await call.message.answer(render_books(books), reply_markup=main_kb())
        except Exception as e:
            await call.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_kb())
    else:
        user_session[uid] = {"step": "books"}
        await call.message.answer(
            "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)",
            reply_markup=main_kb()
        )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
