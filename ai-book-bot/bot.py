import os, logging, json, asyncio, aiohttp
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:8000")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ú–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
           KeyboardButton("üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"),
           KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    return kb

# --- –ü–∞–º—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—å –≤ –û–ó–£)
STATE = {}  # user_id -> {"favorites":[], "genres":[], "authors":[],"stage":""}

@dp.message_handler(commands=['start', 'menu'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_start(message: types.Message):
    uid = message.from_user.id
    STATE[uid] = {"favorites":[], "genres":[], "authors":[], "stage":"fav"}
    await message.answer("–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)")

@dp.message_handler(lambda m: STATE.get(m.from_user.id, {}).get("stage") == "fav")
async def rec_genres(message: types.Message):
    uid = message.from_user.id
    STATE[uid]["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    STATE[uid]["stage"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(lambda m: STATE.get(m.from_user.id, {}).get("stage") == "genres")
async def rec_authors(message: types.Message):
    uid = message.from_user.id
    STATE[uid]["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    STATE[uid]["stage"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(lambda m: STATE.get(m.from_user.id, {}).get("stage") == "authors")
async def rec_finish(message: types.Message):
    uid = message.from_user.id
    authors = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    STATE[uid]["authors"] = authors

    payload = {
        "favorites": STATE[uid]["favorites"],
        "genres": STATE[uid]["genres"],
        "authors": STATE[uid]["authors"],
    }
    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")

    # POST –Ω–∞ –±—ç–∫–µ–Ω–¥
    try:
        async with aiohttp.ClientSession() as s:
            url = f"{BACKEND_URL}/v1/users/{uid}/recommendations"
            async with s.post(url, json=payload, timeout=120) as r:
                if r.status == 200:
                    data = await r.json()
                    books = data.get("books", [])
                    if not books:
                        await message.answer("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòï", reply_markup=main_menu())
                        return
                    lines = [f"üìñ <b>{b.get('title')}</b> ‚Äî {b.get('author') or '‚Äî'}\nüõà {b.get('reason') or ''}".strip() for b in books]
                    await message.answer("\n\n".join(lines), parse_mode="HTML", reply_markup=main_menu())
                else:
                    txt = await r.text()
                    await message.answer(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {r.status}:\n{txt}", reply_markup=main_menu())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_menu())

    STATE.pop(uid, None)

# --- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ sequence)
@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    uid = message.from_user.id
    STATE[uid] = {"favorites":[], "genres":[], "authors":[], "stage":"q1"}
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?")

@dp.message_handler(lambda m: STATE.get(m.from_user.id, {}).get("stage") == "q1")
async def quiz_q2(message: types.Message):
    uid = message.from_user.id
    if message.text.strip():
        STATE[uid]["favorites"] = [message.text.strip()]
    STATE[uid]["stage"] = "q2"
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)")

@dp.message_handler(lambda m: STATE.get(m.from_user.id, {}).get("stage") == "q2")
async def quiz_done(message: types.Message):
    uid = message.from_user.id
    # —Ç—É—Ç –æ—Ç–≤–µ—Ç –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
    STATE[uid]["stage"] = None
    await message.answer("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–±–æ—Ä–∫—É.", reply_markup=main_menu())

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    await message.answer("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üôÇ", reply_markup=main_menu())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
