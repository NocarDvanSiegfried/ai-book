import os, requests
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

_BASE = os.getenv("BACKEND_URL", "http://127.0.0.1:8000").rstrip("/")
API_V1 = _BASE if _BASE.endswith("/v1") else f"{_BASE}/v1"

def api(path: str) -> str:
    return f"{API_V1}{path}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ---------- –ü—Ä–æ—Ñ–∏–ª—å ----------
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    url = api(f"/users/{message.from_user.id}/profile")
    try:
        r = requests.get(url, timeout=10)
        if r.status_code == 404:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏–ª–∏ ¬´üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª.")
            return
        r.raise_for_status()
        p = r.json()
        txt = (
            f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {p.get('first_name') or '-'} {p.get('last_name') or ''}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await message.answer(txt)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")

# ---------- –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ----------
def _recommend_with(prefs: dict) -> list[dict]:
    """—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã"""
    url = api(f"/users/{prefs['user_id']}/recommendations")
    payload = {
        "favorites": prefs.get("favorites", []),
        "genres": prefs.get("genres", []),
        "authors": prefs.get("authors", []),
    }
    r = requests.post(url, json=payload, timeout=60)
    r.raise_for_status()
    return r.json().get("books", [])

def _try_build_prefs_from_backend(uid: int) -> dict | None:
    """–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å prefs –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è/–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    # 1) –ø—Ä–æ—Ñ–∏–ª—å
    try:
        pr = requests.get(api(f"/users/{uid}/profile"), timeout=5)
        if pr.status_code == 200:
            p = pr.json()
            return {
                "user_id": uid,
                "favorites": [],  # –≤–æ–∑—å–º—ë–º –∏–∑ –∫–≤–∏–∑–∞ –Ω–∏–∂–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç
                "genres": p.get("preferred_genres", []),
                "authors": p.get("preferred_authors", []),
            }
    except Exception:
        pass
    # 2) –∫–≤–∏–∑
    try:
        qz = requests.get(api(f"/users/{uid}/quiz"), timeout=5)
        if qz.status_code == 200:
            q = qz.json()
            answers = q.get("answers", {}) or {}
            genres = answers.get("favorite_genres", [])
            fav = q.get("q1_favorite_book")
            return {
                "user_id": uid,
                "favorites": [fav] if fav else [],
                "genres": genres,
                "authors": [],
            }
    except Exception:
        pass
    return None

# ---------- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –µ—Å—Ç—å –∫–∞–∫ fallback) ----------
user_session = {}

@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_start(message: types.Message):
    uid = message.from_user.id
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å
    prefs = _try_build_prefs_from_backend(uid)
    if prefs and (prefs["genres"] or prefs["favorites"] or prefs["authors"]):
        try:
            books = _recommend_with(prefs)
            if books:
                lines=[]
                for b in books:
                    line = f"üìñ {b.get('title')}"
                    if b.get("author"):
                        line += f" ‚Äî {b['author']}"
                    if b.get("reason"):
                        line += f"\nüõà {b['reason']}"
                    lines.append(line)
                await message.answer("\n\n".join(lines))
                return
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é/–≤–∏–∫—Ç–æ—Ä–∏–Ω–µ: {e}")

    # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä
    user_session[uid] = {"step": "books"}
    await message.answer("–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "books")
async def rec_books(message: types.Message):
    s = user_session[message.from_user.id]
    s["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "genres")
async def rec_genres(message: types.Message):
    s = user_session[message.from_user.id]
    s["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "authors")
async def rec_authors(message: types.Message):
    uid = message.from_user.id
    s = user_session[uid]
    s["authors"] = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = None
    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")
    try:
        books = _recommend_with({"user_id": uid,
                                 "favorites": s.get("favorites", []),
                                 "genres": s.get("genres", []),
                                 "authors": s.get("authors", [])})
        # –æ–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
        try:
            requests.put(api(f"/users/{uid}/profile"), json={
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "lang": "ru",
                "preferred_genres": s.get("genres", []),
                "preferred_authors": s.get("authors", []),
            }, timeout=8)
        except Exception:
            pass
        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî")
            return
        lines=[]
        for b in books:
            line = f"üìñ {b.get('title')}"
            if b.get("author"):
                line += f" ‚Äî {b['author']}"
            if b.get("reason"):
                line += f"\nüõà {b['reason']}"
            lines.append(line)
        await message.answer("\n\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# ---------- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ 2.0 ----------
quiz_state = {}  # user_id -> {"q": int, ...}

QUESTS = [
    ("q1", "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?"),
    ("q2", "–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)"),
    ("genres", "–í–æ–ø—Ä–æ—Å 3: –õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞)"),
    ("length", "–í–æ–ø—Ä–æ—Å 4: –ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å? (short/medium/long)"),
    ("mood", "–í–æ–ø—Ä–æ—Å 5: –ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–∏–≥ –Ω—Ä–∞–≤–∏—Ç—Å—è? (cozy/dark/adventurous/—É–º–Ω–æ–µ/—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ ‚Ä¶)"),
    ("lang", "–í–æ–ø—Ä–æ—Å 6: –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –æ–±—ã—á–Ω–æ —á–∏—Ç–∞–µ—à—å? (ru/en/‚Ä¶ )"),
    ("format", "–í–æ–ø—Ä–æ—Å 7: –§–æ—Ä–º–∞—Ç? (ebook/audiobook/paper)"),
]

@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    quiz_state[message.from_user.id] = {"step": 0}
    await message.answer(QUESTS[0][1])

@dp.message_handler(lambda m: message.from_user.id in quiz_state)  # type: ignore
async def quiz_flow(message: types.Message):
    uid = message.from_user.id
    if uid not in quiz_state:
        return
    st = quiz_state[uid]
    idx = st.get("step", 0)
    key, _ = QUESTS[idx]

    text = message.text.strip()
    # –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if key == "q2":
        try:
            int(text)
        except:
            await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")
            return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    st[key] = text
    idx += 1
    if idx < len(QUESTS):
        st["step"] = idx
        await message.answer(QUESTS[idx][1])
        return

    # –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–ø—Ä–æ—Å -> —à–ª—ë–º –≤ –±—ç–∫–µ–Ω–¥ –∏ –æ—Ç–¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    try:
        payload = {
            "q1_favorite_book": st.get("q1"),
            "q2_books_per_year": int(st.get("q2", "0") or 0),
            "favorite_genres": [x.strip() for x in st.get("genres","").split(",") if x.strip()],
            "preferred_length": st.get("length"),
            "mood": st.get("mood"),
            "language": st.get("lang"),
            "format": st.get("format"),
        }
        r = requests.post(api(f"/users/{uid}/quiz"), json=payload, timeout=10)
        r.raise_for_status()
        # –æ–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ (–∂–∞–Ω—Ä—ã)
        try:
            requests.put(api(f"/users/{uid}/profile"), json={
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "lang": payload.get("language") or "ru",
                "preferred_genres": payload.get("favorite_genres", []),
                "preferred_authors": [],
            }, timeout=8)
        except Exception:
            pass

        # —Å—Ä–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –æ–ø—Ä–æ—Å–∞
        prefs = {
            "user_id": uid,
            "favorites": [payload["q1_favorite_book"]] if payload.get("q1_favorite_book") else [],
            "genres": payload.get("favorite_genres", []),
            "authors": [],
        }
        books = _recommend_with(prefs)
        if books:
            lines=[]
            for b in books:
                line = f"üìñ {b.get('title')}"
                if b.get("author"):
                    line += f" ‚Äî {b['author']}"
                if b.get("reason"):
                    line += f"\nüõà {b['reason']}"
                lines.append(line)
            await message.answer("\n\n".join(lines), reply_markup=main_kb())
        else:
            await message.answer("–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª.", reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}", reply_markup=main_kb())
    finally:
        quiz_state.pop(uid, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
