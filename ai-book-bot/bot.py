# bot.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã)

import os, requests
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:8000")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ---------- –ü—Ä–æ—Ñ–∏–ª—å ----------
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    url = f"{BACKEND_URL}/v1/users/{message.from_user.id}/profile"
    try:
        r = requests.get(url, timeout=10)
        if r.status_code != 200:
            raise RuntimeError(r.text)
        p = r.json()
        txt = (
            f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {p.get('first_name') or '-'} {p.get('last_name') or ''}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await message.answer(txt)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–∞–¥–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
user_session = {}  # user_id -> dict

# ---------- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ----------
@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_start(message: types.Message):
    user_session[message.from_user.id] = {"step": "books"}
    await message.answer("–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "books")
async def rec_books(message: types.Message):
    s = user_session[message.from_user.id]
    s["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "genres")
async def rec_genres(message: types.Message):
    s = user_session[message.from_user.id]
    s["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "authors")
async def rec_authors(message: types.Message):
    s = user_session[message.from_user.id]
    s["authors"] = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = None
    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")
    try:
        url = f"{BACKEND_URL}/v1/users/{message.from_user.id}/recommendations"
        payload = {
            "favorites": s.get("favorites", []),
            "genres": s.get("genres", []),
            "authors": s.get("authors", []),
        }
        r = requests.post(url, json=payload, timeout=60)
        if r.status_code != 200:
            raise RuntimeError(f"{r.status_code}: {r.text}")
        data = r.json()
        books = data.get("books", [])
        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî")
            return

        # –°–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        prof_url = f"{BACKEND_URL}/v1/users/{message.from_user.id}/profile"
        _ = requests.put(prof_url, json={
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "lang": "ru",
            "preferred_genres": s.get("genres", []),
            "preferred_authors": s.get("authors", []),
        }, timeout=10)

        lines = []
        for b in books:
            line = f"üìñ {b.get('title')}"
            if b.get("author"):
                line += f" ‚Äî {b['author']}"
            lines.append(line)
        await message.answer("\n\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# ---------- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ----------
quiz_state = {}  # user_id -> {"q": int, "q1": str}

@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    quiz_state[message.from_user.id] = {"q": 1}
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 1)
async def quiz_q1(message: types.Message):
    st = quiz_state[message.from_user.id]
    st["q1"] = message.text.strip()
    st["q"] = 2
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 2)
async def quiz_q2(message: types.Message):
    st = quiz_state[message.from_user.id]
    try:
        n = int(message.text.strip())
    except:
        await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")
        return
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—ç–∫–µ–Ω–¥
    try:
        url = f"{BACKEND_URL}/v1/users/{message.from_user.id}/quiz"
        payload = {"q1_favorite_book": st["q1"], "q2_books_per_year": n}
        r = requests.post(url, json=payload, timeout=10)
        if r.status_code != 200:
            raise RuntimeError(r.text)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
    finally:
        quiz_state.pop(message.from_user.id, None)

    await message.answer("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–±–æ—Ä–∫—É.", reply_markup=main_kb())
