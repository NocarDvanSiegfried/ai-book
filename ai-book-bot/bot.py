# ai-book-bot/bot.py
import os, requests
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")

_BASE = os.getenv("BACKEND_URL", "http://127.0.0.1:8000").rstrip("/")
API_V1 = _BASE if _BASE.endswith("/v1") else f"{_BASE}/v1"

def api(path: str) -> str:
    return f"{API_V1}{path}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

# ---- –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
user_session: dict[int, dict] = {}
quiz_state: dict[int, dict] = {}

async def send(chat, text):
    await chat.answer(text, reply_markup=main_kb())

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_session.pop(message.from_user.id, None)
    quiz_state.pop(message.from_user.id, None)
    await send(message, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")

# ---------- –ü—Ä–æ—Ñ–∏–ª—å ----------
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    url = api(f"/users/{message.from_user.id}/profile")
    try:
        r = requests.get(url, timeout=10)
        if r.status_code == 404:
            await send(message, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏–ª–∏ ¬´üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª.")
            return
        r.raise_for_status()
        p = r.json()
        txt = (
            f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {p.get('first_name') or '-'} {p.get('last_name') or ''}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await send(message, txt)
    except Exception as e:
        await send(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")

# ---------- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ----------
def _safe_get(url, timeout=8):
    try:
        r = requests.get(url, timeout=timeout)
        if r.status_code == 404:
            return None
        r.raise_for_status()
        return r.json()
    except Exception:
        return None

@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_entry(message: types.Message):
    uid = message.from_user.id
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    quiz = _safe_get(api(f"/users/{uid}/quiz"))
    prof = _safe_get(api(f"/users/{uid}/profile"))

    favorites = []
    genres = []
    authors = []

    if quiz and quiz.get("q1_favorite_book"):
        favorites = [quiz["q1_favorite_book"]]

    if prof:
        genres = prof.get("preferred_genres", []) or []
        authors = prof.get("preferred_authors", []) or []

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if favorites or genres or authors:
        await send(message, "–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")
        try:
            url = api(f"/users/{uid}/recommendations")
            payload = {"favorites": favorites, "genres": genres, "authors": authors}
            r = requests.post(url, json=payload, timeout=60)
            r.raise_for_status()
            data = r.json()
            books = data.get("books", [])
            if not books:
                await send(message, "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî")
                return

            # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∂–∞–Ω—Ä—ã/–∞–≤—Ç–æ—Ä—ã)
            if genres or authors:
                prof_url = api(f"/users/{uid}/profile")
                try:
                    _ = requests.put(prof_url, json={
                        "username": message.from_user.username,
                        "first_name": message.from_user.first_name,
                        "last_name": message.from_user.last_name,
                        "lang": "ru",
                        "preferred_genres": genres,
                        "preferred_authors": authors,
                    }, timeout=8)
                except Exception:
                    pass

            lines = []
            for b in books:
                line = f"üìñ {b.get('title')}"
                if b.get("author"):
                    line += f" ‚Äî {b['author']}"
                if b.get("reason"):
                    line += f"\nüõà {b['reason']}"
                lines.append(line)
            await send(message, "\n\n".join(lines))
            return
        except Exception as e:
            await send(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Å—Ç–µ—Ä (3 –≤–æ–ø—Ä–æ—Å–∞)
    user_session.pop(uid, None)
    user_session[uid] = {"step": "books"}
    await send(message, "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "books")
async def rec_books(message: types.Message):
    uid = message.from_user.id
    s = user_session[uid]
    s["favorites"] = [x.strip() for x in (message.text or "").split(",") if x.strip()]
    s["step"] = "genres"
    await send(message, "–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "genres")
async def rec_genres(message: types.Message):
    uid = message.from_user.id
    s = user_session[uid]
    s["genres"] = [x.strip() for x in (message.text or "").split(",") if x.strip()]
    s["step"] = "authors"
    await send(message, "–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "authors")
async def rec_authors(message: types.Message):
    uid = message.from_user.id
    txt = (message.text or "").strip()
    if txt in ("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "/start", "/cancel"):
        return

    s = user_session[uid]
    s["authors"] = [] if txt == "-" else [x.strip() for x in txt.split(",") if x.strip()]
    s["step"] = None
    await send(message, "–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")
    try:
        url = api(f"/users/{uid}/recommendations")
        payload = {
            "favorites": s.get("favorites", []),
            "genres": s.get("genres", []),
            "authors": s.get("authors", []),
        }
        r = requests.post(url, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        books = data.get("books", [])
        if not books:
            await send(message, "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
        prof_url = api(f"/users/{uid}/profile")
        try:
            _ = requests.put(prof_url, json={
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "lang": "ru",
                "preferred_genres": s.get("genres", []),
                "preferred_authors": s.get("authors", []),
            }, timeout=8)
        except Exception:
            pass

        lines = []
        for b in books:
            line = f"üìñ {b.get('title')}"
            if b.get("author"):
                line += f" ‚Äî {b['author']}"
            if b.get("reason"):
                line += f"\nüõà {b['reason']}"
            lines.append(line)
        await send(message, "\n\n".join(lines))
    except Exception as e:
        await send(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        user_session.pop(uid, None)

# ---------- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ----------
@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    uid = message.from_user.id
    quiz_state.pop(uid, None)
    quiz_state[uid] = {"q": 1}
    await send(message, "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 1)
async def quiz_q1(message: types.Message):
    uid = message.from_user.id
    st = quiz_state[uid]
    st["q1"] = (message.text or "").strip()
    st["q"] = 2
    await send(message, "–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 2)
async def quiz_q2(message: types.Message):
    uid = message.from_user.id
    st = quiz_state[uid]
    try:
        n = int((message.text or "").strip())
    except:
        await send(message, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")
        return
    try:
        url = api(f"/users/{uid}/quiz")
        payload = {"q1_favorite_book": st["q1"], "q2_books_per_year": n}
        r = requests.post(url, json=payload, timeout=10)
        r.raise_for_status()
    except Exception as e:
        await send(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
    finally:
        quiz_state.pop(uid, None)
    await send(message, "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª. –Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–≤–æ—é –ª—é–±–∏–º—É—é –∫–Ω–∏–≥—É.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
