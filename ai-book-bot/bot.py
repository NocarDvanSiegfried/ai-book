import os
import requests
from aiogram import Bot, Dispatcher, executor, types

# --- ENV / API ---
API_TOKEN = os.getenv("TELEGRAM_TOKEN")

_BASE = os.getenv("BACKEND_URL", "http://127.0.0.1:8000").rstrip("/")
API_V1 = _BASE if _BASE.endswith("/v1") else f"{_BASE}/v1"

def api(path: str) -> str:
    return f"{API_V1}{path}"

# --- BOT ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

def rec_mode_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(
        types.InlineKeyboardButton("‚ö° –ê–≤—Ç–æ", callback_data="rec_auto"),
        types.InlineKeyboardButton("üõ† –ú–∞—Å—Ç–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="rec_master"),
    )
    return ikb

# --- SIMPLE STATE ---
quiz_cache = {}        # user_id -> {"q1": str, "q2": int}
wizard_state = {}      # user_id -> {"step": str, "favorites":[], "genres":[], "authors":[]}

# ===================== COMMON =====================

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ===================== PROFILE =====================

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    try:
        r = requests.get(api(f"/users/{message.from_user.id}/profile"), timeout=10)
        if r.status_code == 404:
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª (–ê–≤—Ç–æ) –∏–ª–∏ ¬´üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª.",
                reply_markup=main_kb()
            )
            return
        r.raise_for_status()
        p = r.json()
        txt = (
            "–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {p.get('first_name') or '-'} {p.get('last_name') or ''}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await message.answer(txt, reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}", reply_markup=main_kb())

# ===================== QUIZ =====================

@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    quiz_cache[message.from_user.id] = {"q": 1}
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?",
                         reply_markup=main_kb())

@dp.message_handler(lambda m: quiz_cache.get(m.from_user.id, {}).get("q") == 1)
async def quiz_q1(message: types.Message):
    st = quiz_cache[message.from_user.id]
    st["q1"] = message.text.strip()
    st["q"] = 2
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)",
                         reply_markup=main_kb())

@dp.message_handler(lambda m: quiz_cache.get(m.from_user.id, {}).get("q") == 2)
async def quiz_q2(message: types.Message):
    st = quiz_cache[message.from_user.id]
    try:
        st["q2"] = int(message.text.strip())
    except ValueError:
        await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5", reply_markup=main_kb())
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã ¬´–ê–≤—Ç–æ¬ª, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    try:
        r = requests.post(
            api(f"/users/{message.from_user.id}/quiz"),
            json={"q1_favorite_book": st["q1"], "q2_books_per_year": st["q2"]},
            timeout=10
        )
        r.raise_for_status()
    except Exception:
        pass

    st["q"] = None
    await message.answer(
        "–ì–æ—Ç–æ–≤–æ! –ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–¥–±–æ—Ä–∫—É?",
        reply_markup=main_kb()
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=rec_mode_kb())

# ===================== RECOMMENDATIONS =====================

@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_entry(message: types.Message):
    # –ü–ï–†–í–´–ú –î–ï–õ–û–ú ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=rec_mode_kb())
    await message.answer("–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.", reply_markup=main_kb())

# ---- –ê–≤—Ç–æ —Ä–µ–∂–∏–º ----
@dp.callback_query_handler(lambda c: c.data == "rec_auto")
async def rec_auto(call: types.CallbackQuery):
    uid = call.from_user.id

    # —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∑–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    favorites, genres, authors = [], [], []

    q = quiz_cache.get(uid)
    if q and q.get("q1"):
        favorites.append(q["q1"])

    try:
        pr = requests.get(api(f"/users/{uid}/profile"), timeout=10)
        if pr.status_code == 200:
            pdata = pr.json()
            genres = pdata.get("preferred_genres") or []
            authors = pdata.get("preferred_authors") or []
    except Exception:
        pass

    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –∏–¥—ë–º –≤ LLM: –æ–Ω —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å ¬´–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await bot.answer_callback_query(call.id)
    await bot.send_message(uid, "–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶", reply_markup=main_kb())

    try:
        r = requests.post(
            api(f"/users/{uid}/recommendations"),
            json={"favorites": favorites, "genres": genres, "authors": authors},
            timeout=60
        )
        r.raise_for_status()
        data = r.json()
        books = data.get("books", [])
        if not books:
            await bot.send_message(uid, "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî", reply_markup=main_kb())
            return

        # –æ–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∂–∞–Ω—Ä–∞–º–∏/–∞–≤—Ç–æ—Ä–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            requests.post(
                api(f"/users/{uid}/profile"),
                json={
                    "username": call.from_user.username,
                    "first_name": call.from_user.first_name,
                    "last_name": call.from_user.last_name,
                    "lang": "ru",
                    "preferred_genres": genres,
                    "preferred_authors": authors,
                },
                timeout=10
            )
        except Exception:
            pass

        lines = []
        for b in books:
            line = f"üìö {b.get('title')}"
            if b.get("author"):
                line += f" ‚Äî {b['author']}"
            if b.get("reason"):
                line += f"\n‚ñ´ {b['reason']}"
            lines.append(line)
        await bot.send_message(uid, "–ì–æ—Ç–æ–≤–æ! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=main_kb())
        await bot.send_message(uid, "\n\n".join(lines), reply_markup=main_kb())
    except requests.HTTPError as e:
        await bot.send_message(uid, f"–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e}", reply_markup=main_kb())
    except Exception as e:
        await bot.send_message(uid, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_kb())

# ---- –ú–∞—Å—Ç–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ ----
@dp.callback_query_handler(lambda c: c.data == "rec_master")
async def rec_master(call: types.CallbackQuery):
    uid = call.from_user.id
    wizard_state[uid] = {"step": "books", "favorites": [], "genres": [], "authors": []}
    await bot.answer_callback_query(call.id)
    await bot.send_message(uid,
        "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)",
        reply_markup=main_kb()
    )

@dp.message_handler(lambda m: wizard_state.get(m.from_user.id, {}).get("step") == "books")
async def w_books(message: types.Message):
    st = wizard_state[message.from_user.id]
    st["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    st["step"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...",
                         reply_markup=main_kb())

@dp.message_handler(lambda m: wizard_state.get(m.from_user.id, {}).get("step") == "genres")
async def w_genres(message: types.Message):
    st = wizard_state[message.from_user.id]
    st["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    st["step"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:",
                         reply_markup=main_kb())

@dp.message_handler(lambda m: wizard_state.get(m.from_user.id, {}).get("step") == "authors")
async def w_authors(message: types.Message):
    uid = message.from_user.id
    st = wizard_state[uid]
    st["authors"] = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    st["step"] = None

    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶", reply_markup=main_kb())

    try:
        r = requests.post(
            api(f"/users/{uid}/recommendations"),
            json={"favorites": st["favorites"], "genres": st["genres"], "authors": st["authors"]},
            timeout=60
        )
        r.raise_for_status()
        data = r.json()
        books = data.get("books", [])
        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî", reply_markup=main_kb())
            return

        # —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
        try:
            requests.post(
                api(f"/users/{uid}/profile"),
                json={
                    "username": message.from_user.username,
                    "first_name": message.from_user.first_name,
                    "last_name": message.from_user.last_name,
                    "lang": "ru",
                    "preferred_genres": st["genres"],
                    "preferred_authors": st["authors"],
                },
                timeout=10
            )
        except Exception:
            pass

        lines = []
        for b in books:
            line = f"üìö {b.get('title')}"
            if b.get("author"):
                line += f" ‚Äî {b['author']}"
            if b.get("reason"):
                line += f"\n‚ñ´ {b['reason']}"
            lines.append(line)
        await message.answer("\n\n".join(lines), reply_markup=main_kb())
    except requests.HTTPError as e:
        await message.answer(f"–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e}", reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=main_kb())
    finally:
        wizard_state.pop(uid, None)

# ===================================================

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
