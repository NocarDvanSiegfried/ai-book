# bot.py
import os
import logging
import requests
from aiogram import Bot, Dispatcher, executor, types

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
BACKEND_URL = (os.getenv("BACKEND_URL", "http://127.0.0.1:8000/v1") or "").rstrip("/")

if not API_TOKEN:
    raise SystemExit("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –≤ .env –∏–ª–∏ EnvironmentFile systemd.")

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–π (–ø—Ä–æ—Å—Ç–∞—è in-memory)
user_session = {}  # user_id -> {step, favorites, genres, authors}
quiz_state   = {}  # user_id -> {q, q1}

def main_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

# ---------- –•–µ–ª–ø–µ—Ä—ã HTTP ----------
def _get(url: str, **kw):
    return requests.get(url, timeout=kw.pop("timeout", 10), **kw)

def _post(url: str, **kw):
    return requests.post(url, timeout=kw.pop("timeout", 15), **kw)

def _put(url: str, **kw):
    return requests.put(url, timeout=kw.pop("timeout", 10), **kw)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

@dp.message_handler(commands=["cancel"])
async def cmd_cancel(message: types.Message):
    user_session.pop(message.from_user.id, None)
    quiz_state.pop(message.from_user.id, None)
    await message.answer("–û–∫, –≤—Å—ë —Å–±—Ä–æ—Å–∏–ª.", reply_markup=main_kb())

# ======================================================================
# –ü—Ä–æ—Ñ–∏–ª—å
# ======================================================================
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_show(message: types.Message):
    url = f"{BACKEND_URL}/users/{message.from_user.id}/profile"
    try:
        r = _get(url)
        if r.status_code == 404:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏–ª–∏ ¬´üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª.")
            return
        r.raise_for_status()
        p = r.json()
        txt = (
            "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"–ò–º—è: @{p.get('username') or '-'}\n"
            f"–Ø–∑—ã–∫: {p.get('lang') or 'ru'}\n"
            f"–ñ–∞–Ω—Ä—ã: {', '.join(p.get('preferred_genres', [])) or '-'}\n"
            f"–ê–≤—Ç–æ—Ä—ã: {', '.join(p.get('preferred_authors', [])) or '-'}"
        )
        await message.answer(txt)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: <code>{e}</code>")

# ======================================================================
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
# ======================================================================
@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def rec_start(message: types.Message):
    user_session[message.from_user.id] = {"step": "books"}
    await message.answer(
        "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)"
    )

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "books")
async def rec_books(message: types.Message):
    s = user_session[message.from_user.id]
    s["favorites"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "genres"
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "genres")
async def rec_genres(message: types.Message):
    s = user_session[message.from_user.id]
    s["genres"] = [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = "authors"
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(lambda m: user_session.get(m.from_user.id, {}).get("step") == "authors")
async def rec_authors(message: types.Message):
    uid = message.from_user.id
    s = user_session[uid]
    s["authors"] = [] if message.text.strip() == "-" else [x.strip() for x in message.text.split(",") if x.strip()]
    s["step"] = None
    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")

    try:
        # –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        url = f"{BACKEND_URL}/users/{uid}/recommendations"
        payload = {
            "favorites": s.get("favorites", []),
            "genres": s.get("genres", []),
            "authors": s.get("authors", []),
        }
        r = _post(url, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        books = data.get("books", []) or []

        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üòî")
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å (—Å—Ö–µ–º–∞ –ë–î: username/lang/genres/authors)
        prof_url = f"{BACKEND_URL}/users/{uid}/profile"
        _ = _put(
            prof_url,
            json={
                "username": message.from_user.username,
                "lang": "ru",
                "preferred_genres": s.get("genres", []),
                "preferred_authors": s.get("authors", []),
            },
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        lines = []
        for b in books:
            title = b.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            author = b.get("author")
            reason = b.get("reason")
            line = f"üìñ <b>{title}</b>"
            if author:
                line += f" ‚Äî {author}"
            if reason:
                line += f"\nüõà {reason}"
            lines.append(line)

        await message.answer("\n\n".join(lines))
    except requests.HTTPError as e:
        await message.answer(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: <code>{e.response.status_code}</code>\n{e.response.text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: <code>{e}</code>")
    finally:
        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        user_session.pop(uid, None)

# ======================================================================
# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
# ======================================================================
@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message):
    quiz_state[message.from_user.id] = {"q": 1}
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 1)
async def quiz_q1(message: types.Message):
    st = quiz_state[message.from_user.id]
    st["q1"] = message.text.strip()
    st["q"] = 2
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)")

@dp.message_handler(lambda m: quiz_state.get(m.from_user.id, {}).get("q") == 2)
async def quiz_q2(message: types.Message):
    uid = message.from_user.id
    st = quiz_state[uid]
    try:
        n = int(message.text.strip())
    except Exception:
        await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –±—ç–∫–µ–Ω–¥
    try:
        url = f"{BACKEND_URL}/users/{uid}/quiz"
        payload = {"q1_favorite_book": st["q1"], "q2_books_per_year": n}
        r = _post(url, json=payload)
        r.raise_for_status()
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: <code>{e}</code>")
    finally:
        quiz_state.pop(uid, None)

    await message.answer("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–±–æ—Ä–∫—É.", reply_markup=main_kb())

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
if __name__ == "__main__":
    # skip_updates=True ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞
    executor.start_polling(dp, skip_updates=True)
