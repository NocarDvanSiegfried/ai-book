import logging
import os
import json
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

# --- ENV ---
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
BACKEND_BASE = os.getenv("BACKEND_URL", "http://127.0.0.1:8000").rstrip("/")

if not API_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# --- Bot basics ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ callback –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ
# { user_id: [{"title":..,"author":..,"why":..}, ...] }
last_recs = {}

# --- Keyboards ---
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏").add("üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞").add("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return kb

def info_button(i: int):
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton(text="üõà –ü–æ—è—Å–Ω–µ–Ω–∏–µ", callback_data=f"info:{i}"))
    return ikb

# --- States ---
class RecoFSM(StatesGroup):
    wait_books = State()
    wait_genres = State()
    wait_authors = State()

class QuizFSM(StatesGroup):
    q1 = State()
    q2 = State()

# --- Handlers ---

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def reco_start(message: types.Message, state: FSMContext):
    await state.finish()
    await RecoFSM.wait_books.set()
    await message.answer(
        "–ù–∞–ø–∏—à–∏ 2‚Äì3 –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü, –î—é–Ω–∞, –¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞)",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(state=RecoFSM.wait_books)
async def reco_books(message: types.Message, state: FSMContext):
    books = [x.strip() for x in message.text.split(",") if x.strip()]
    await state.update_data(favorites=books)
    await RecoFSM.wait_genres.set()
    await message.answer("–û–∫–µ–π! –¢–µ–ø–µ—Ä—å –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤ ...")

@dp.message_handler(state=RecoFSM.wait_genres)
async def reco_genres(message: types.Message, state: FSMContext):
    genres = [x.strip() for x in message.text.split(",") if x.strip()]
    await state.update_data(genres=genres)
    await RecoFSM.wait_authors.set()
    await message.answer("–ò –ø–∞—Ä—É –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")

@dp.message_handler(state=RecoFSM.wait_authors)
async def reco_authors(message: types.Message, state: FSMContext):
    authors = []
    if message.text.strip() != "-":
        authors = [x.strip() for x in message.text.split(",") if x.strip()]

    data = await state.get_data()
    favorites = data.get("favorites", [])
    genres = data.get("genres", [])

    await message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¶")

    try:
        url = f"{BACKEND_BASE}/v1/users/{message.from_user.id}/recommendations"
        payload = {"favorites": favorites, "genres": genres, "authors": authors}
        resp = requests.post(url, json=payload, timeout=30)
        if resp.status_code != 200:
            await message.answer(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {resp.status_code}:\n{resp.text}")
            await state.finish()
            await message.answer("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
            return

        data = resp.json()
        books = data.get("books", [])
        if not books:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üòï", reply_markup=main_menu_kb())
            await state.finish()
            return

        # —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_recs[message.from_user.id] = books

        # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ –æ–¥–Ω–æ–π —Å –∫–Ω–æ–ø–∫–æ–π "üõà –ü–æ—è—Å–Ω–µ–Ω–∏–µ"
        for i, b in enumerate(books):
            title = b.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            author = b.get("author", "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            await message.answer(f"üìñ {title} ‚Äî {author}", reply_markup=info_button(i))

        await state.finish()
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚ÜòÔ∏è", reply_markup=main_menu_kb())

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.finish()
        await message.answer("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("info:"))
async def on_info(call: types.CallbackQuery):
    try:
        idx = int(call.data.split(":")[1])
        books = last_recs.get(call.from_user.id, [])
        if 0 <= idx < len(books):
            why = books[idx].get("why", "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏—è")
            await call.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
            await call.message.answer(f"üõà {why}")
        else:
            await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞", show_alert=True)

@dp.message_handler(lambda m: m.text == "üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message, state: FSMContext):
    await state.finish()
    await QuizFSM.q1.set()
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞?")

@dp.message_handler(state=QuizFSM.q1)
async def quiz_q1(message: types.Message, state: FSMContext):
    await state.update_data(fav_book=message.text.strip())
    await QuizFSM.q2.set()
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Ç—ã —á–∏—Ç–∞–µ—à—å –≤ –≥–æ–¥? (—Ü–∏—Ñ—Ä–æ–π)")

@dp.message_handler(state=QuizFSM.q2)
async def quiz_q2(message: types.Message, state: FSMContext):
    # –º–æ–∂–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ
    await state.finish()
    await message.answer("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ¬´üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–±–æ—Ä–∫—É.", reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    await message.answer("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üôÇ", reply_markup=main_menu_kb())

# fallback
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu_kb())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
